---
import ArticleCard from "./ArticleCard.astro";
import { getTranslations, type Locale } from "@/lib/i18n";
import { formatDate } from "@/lib/date";
import { urlFor, type Article } from "@/lib/sanity";
import { getAllTags } from "@/lib/sanity-queries";

const tags = await getAllTags();

export interface Props {
  articles: Article[];
  locale: Locale;
}

const { articles, locale } = Astro.props as Props;
const t = getTranslations(locale);
---

<section class="max-w-6xl mx-auto">
  <!-- Filtres -->
  <div class="mb-8">
    <h3 class="text-xl font-semibold mb-4 text-center">
      {t.articles.category}
    </h3>

    <div class="flex flex-wrap gap-3 justify-center">
      <button
        data-filter=""
        class="filter-btn px-4 py-2 rounded-full border-2 border-secondary text-secondary bg-white hover:text-white hover:bg-secondary transition-all duration-200 font-bold"
      >
        {t.articles.allArticles}
      </button>

      {
        tags.map((tag) => (
          <button
            data-filter={tag.slug.current}
            class="filter-btn px-4 py-2 rounded-full border-2 border-secondary text-secondary bg-white hover:text-white hover:bg-secondary transition-all duration-200 font-bold"
          >
            {tag.title[locale]}
          </button>
        ))
      }
    </div>
  </div>

  <!-- Articles -->
  <div
    class="grid grid-cols-1 lg:grid-cols-2 gap-5 mb-8"
    id="articles-container"
  >
    {
      articles.map((article) => (
        <div
          class="article-card"
          data-tags={(article.tags || [])
            .map((tag) => tag.slug.current)
            .join(",")}
        >
          <ArticleCard
            tags={article.tags || []}
            title={article.title[locale]}
            date={formatDate(new Date(article.date), locale)}
            image={urlFor(article.image).width(600).height(400).url()}
            excerpt={article.intro[locale]}
            slug={article.slug[locale].current}
            is_first={false}
            locale={locale}
          />
        </div>
      ))
    }
  </div>

  <!-- Message quand aucun article ne correspond -->
  <div id="no-articles-message" class="hidden text-center h-80 pt-8">
    <p class="text-gray-600 text-lg">
      Pas d'articles correspondant à cette catégorie
    </p>
  </div>
</section>

<script>
  document.addEventListener("astro:page-load", function () {
    const filterBtns = document.querySelectorAll(".filter-btn");

    // Variables pour tracker l'état
    let currentActiveBtn: HTMLButtonElement | null = null;
    let currentFilter = "";

    // Restaurer le filtre depuis localStorage
    const savedFilter = localStorage.getItem("articlesFilter") || "";
    currentFilter = savedFilter;

    // Trouver et activer le bon bouton au chargement
    currentActiveBtn = document.querySelector(
      `[data-filter="${savedFilter}"]`
    ) as HTMLButtonElement;

    if (!currentActiveBtn) {
      currentActiveBtn = document.querySelector(
        ".filter-btn[data-filter='']"
      ) as HTMLButtonElement;
      currentFilter = "";
    }

    // Données des articles (côté client)
    const articlesData = Array.from(
      document.querySelectorAll(".article-card")
    ).map((card) => ({
      element: card as HTMLElement,
      tags: card.getAttribute("data-tags")?.split(",") || [],
    }));

    // Initialiser l'état des boutons et filtrer selon le filtre sauvegardé
    function initializeFiltersFromStorage() {
      // Reset tous les boutons
      filterBtns.forEach((btn) => resetButton(btn as HTMLButtonElement));

      // Activer le bon bouton
      if (currentActiveBtn) {
        activateButton(currentActiveBtn);
      }

      // Appliquer le filtre
      filterArticles(currentFilter);
    }

    // Initialiser les filtres depuis localStorage
    initializeFiltersFromStorage();

    filterBtns.forEach((btn) => {
      btn.addEventListener("click", function (this: HTMLButtonElement) {
        const selectedTag = this.getAttribute("data-filter") || "";

        // Éviter les traitements inutiles si même filtre
        if (selectedTag === currentFilter) return;

        // Reset uniquement le bouton précédent
        if (currentActiveBtn) {
          resetButton(currentActiveBtn);
        }

        // Activer le nouveau bouton
        activateButton(this);

        // Mettre à jour les références
        currentActiveBtn = this;
        currentFilter = selectedTag;

        // Sauvegarder le filtre dans localStorage
        localStorage.setItem("articlesFilter", selectedTag);

        // Filtrer avec show/hide au lieu de remove/append
        filterArticles(selectedTag);
      });
    });

    function resetButton(btn: HTMLButtonElement) {
      btn.classList.remove("bg-secondary", "text-white");
      btn.classList.add("bg-white", "text-secondary");
    }

    function activateButton(btn: HTMLButtonElement) {
      btn.classList.remove("bg-white", "text-secondary");
      btn.classList.add("bg-secondary", "text-white");
    }

    function filterArticles(selectedTag: string) {
      let visibleCount = 0;

      articlesData.forEach((article) => {
        const shouldShow =
          selectedTag === "" || article.tags.includes(selectedTag);
        article.element.style.display = shouldShow ? "block" : "none";
        if (shouldShow) visibleCount++;
      });

      // Afficher ou masquer le message "pas d'articles"
      const noArticlesMessage = document.getElementById("no-articles-message");
      if (noArticlesMessage) {
        noArticlesMessage.classList.toggle("hidden", visibleCount > 0);
      }
    }
  });
</script>
