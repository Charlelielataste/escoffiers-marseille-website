---
import MailIcon from "@/components/icons/MailIcon.astro";
import { getTranslations, type Locale } from "@/lib/i18n";

export interface Props {
  locale: Locale;
}

const { locale } = Astro.props;
const t = getTranslations(locale);
---

<section class="relative py-12 bg-white">
  <div class="container mx-auto px-4">
    <div class="max-w-6xl mx-auto">
      <div
        class="border-l-4 border-primary bg-primary/10 p-6 rounded-r-lg mb-10 flex flex-col items-center justify-center"
      >
        <blockquote class="text-lg italic text-text-primary mb-3">
          "La cuisine est un art qui doit être traité avec respect et passion."
        </blockquote>
        <cite class="text-primary font-semibold">Auguste Escoffier</cite>
      </div>

      <!-- Formulaire -->
      <div class="bg-container rounded-2xl max-w-2xl mx-auto p-8 shadow-lg">
        <form id="contact-form" name="contact" method="POST" class="space-y-6">
          <!-- Champ honeypot caché pour la protection anti-spam -->
          <div style="display: none;">
            <label>
              Ne pas remplir ce champ si vous êtes humain:
              <input name="bot-field" />
            </label>
          </div>

          <div class="grid md:grid-cols-2 gap-4">
            <div class="form-group">
              <label
                for="firstName"
                class="block text-sm font-medium text-text-primary mb-2"
              >
                {t.contact.form.firstName}
                <span class="text-primary">*</span>
              </label>
              <input
                type="text"
                id="firstName"
                name="firstName"
                required
                class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-primary focus:border-primary transition-colors bg-white text-text-primary placeholder-gray-400"
                placeholder={t.contact.form.firstNamePlaceholder}
              />
            </div>
            <div class="form-group">
              <label
                for="lastName"
                class="block text-sm font-medium text-text-primary mb-2"
              >
                {t.contact.form.lastName}
                <span class="text-primary">*</span>
              </label>
              <input
                type="text"
                id="lastName"
                name="lastName"
                required
                class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-primary focus:border-primary transition-colors bg-white text-text-primary placeholder-gray-400"
                placeholder={t.contact.form.lastNamePlaceholder}
              />
            </div>
          </div>

          <!-- Email -->
          <div class="form-group">
            <label
              for="email"
              class="block text-sm font-medium text-text-primary mb-2"
            >
              {t.contact.form.email}
              <span class="text-primary">*</span>
            </label>
            <input
              type="email"
              id="email"
              name="email"
              required
              class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-primary focus:border-primary transition-colors bg-white text-text-primary placeholder-gray-400"
              placeholder={t.contact.form.emailPlaceholder}
            />
          </div>

          <!-- Téléphone -->
          <div class="form-group">
            <label
              for="phone"
              class="block text-sm font-medium text-text-primary mb-2"
            >
              {t.contact.form.phone}
            </label>
            <input
              type="tel"
              id="phone"
              name="phone"
              class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-primary focus:border-primary transition-colors bg-white text-text-primary placeholder-gray-400"
              placeholder={t.contact.form.phonePlaceholder}
            />
          </div>

          <!-- Expérience culinaire -->
          <div class="form-group">
            <label
              for="profession"
              class="block text-sm font-medium text-text-primary mb-2"
            >
              {t.contact.form.profession}
              <span class="text-primary">*</span>
            </label>
            <input
              type="text"
              id="profession"
              name="profession"
              required
              class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-primary focus:border-primary transition-colors bg-white text-text-primary placeholder-gray-400"
              placeholder={t.contact.form.professionPlaceholder}
            />
          </div>

          <!-- Adress -->
          <div class="grid md:grid-cols-2 gap-4">
            <div class="form-group">
              <label
                for="city"
                class="block text-sm font-medium text-text-primary mb-2"
              >
                {t.contact.form.city}
                <span class="text-primary">*</span>
              </label>
              <input
                type="text"
                id="city"
                name="city"
                required
                class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-primary focus:border-primary transition-colors bg-white text-text-primary placeholder-gray-400"
                placeholder={t.contact.form.cityPlaceholder}
              />
            </div>
            <div class="form-group">
              <label
                for="zipCode"
                class="block text-sm font-medium text-text-primary mb-2"
              >
                {t.contact.form.zipCode}
                <span class="text-primary">*</span>
              </label>
              <input
                type="text"
                id="zipCode"
                name="zipCode"
                required
                pattern="[0-9]{5}"
                maxlength="5"
                class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-primary focus:border-primary transition-colors bg-white text-text-primary placeholder-gray-400"
                placeholder={t.contact.form.zipCodePlaceholder}
              />
              <div
                id="zipCode-error"
                class="text-red-500 text-sm mt-1.5 hidden"
              >
              </div>
            </div>
          </div>

          <!-- Message -->
          <div class="form-group">
            <label
              for="message"
              class="block text-sm font-medium text-text-primary mb-2"
            >
              {t.contact.form.message}
              <span class="text-primary">*</span>
            </label>
            <textarea
              id="message"
              name="message"
              required
              minlength="20"
              rows="5"
              class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-primary focus:border-primary transition-colors bg-white text-text-primary placeholder-gray-400 resize-none"
              placeholder={t.contact.form.messagePlaceholder}></textarea>
            <div id="message-error" class="text-red-500 text-sm hidden"></div>
          </div>

          <!-- Bouton d'envoi / Zone de message -->
          <div class="pt-4">
            <button
              type="submit"
              id="submit-button"
              disabled
              class="w-full bg-primary/50 text-white font-semibold py-4 px-6 rounded-lg transition-all duration-300 flex items-center justify-center space-x-2 cursor-not-allowed"
            >
              <span id="button-text">{t.contact.form.submit}</span>
            </button>
            <!-- Zone pour afficher les messages de succès/erreur -->
            <div
              id="form-message"
              class="hidden w-full py-4 px-6 rounded-lg text-center font-semibold"
            >
            </div>
          </div>
        </form>
      </div>
      <div id="contact" class="p-5"></div>
      <div
        id="contact"
        class="py-10 border-t px-8 border-b border-primary/40 flex flex-col items-center justify-center gap-y-6"
      >
        <h2 class="text-lg sm:text-2xl font-bold text-primary">
          {t.contact.contactEmail}
        </h2>
        <div class="flex items-center gap-x-4">
          <MailIcon size="16" class="text-primary shrink-0" />
          <a
            href="mailto:contact@disciplesescoffier-provence-mediterranee.org"
            class="font-medium hover:text-tertiary transition-colors sm:text-lg"
          >
            contact@disciplesescoffier-provence-mediterranee.org
          </a>
        </div>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener("astro:page-load", function () {
      const form = document.getElementById("contact-form") as HTMLFormElement;
      if (!form) return;
      const locale = window.location.pathname.startsWith("/en") ? "en" : "fr";
      const submitButton = document.getElementById(
        "submit-button"
      ) as HTMLButtonElement;
      const buttonText = document.getElementById(
        "button-text"
      ) as HTMLSpanElement;

      const requiredFields = [
        document.getElementById("firstName") as HTMLInputElement,
        document.getElementById("lastName") as HTMLInputElement,
        document.getElementById("email") as HTMLInputElement,
        document.getElementById("profession") as HTMLInputElement,
        document.getElementById("city") as HTMLInputElement,
        document.getElementById("zipCode") as HTMLInputElement,
        document.getElementById("message") as HTMLTextAreaElement,
      ];

      // Rate limiting storage
      const RATE_LIMIT_KEY = "contact_form_submissions";
      const RATE_LIMIT_WINDOW = 15 * 60 * 1000; // 15 minutes
      const MAX_SUBMISSIONS = 3;

      // Fonction de validation du code postal
      function validateZipCode(zipCode: string): boolean {
        return /^[0-9]{5}$/.test(zipCode);
      }

      // Fonction de validation du message
      function validateMessage(message: string): boolean {
        return message.trim().length >= 20;
      }

      // Fonction pour afficher/masquer les erreurs
      function showFieldError(fieldId: string, message: string) {
        const errorDiv = document.getElementById(`${fieldId}-error`);
        if (errorDiv) {
          errorDiv.textContent = message;
          errorDiv.classList.remove("hidden");
        }
      }

      function hideFieldError(fieldId: string) {
        const errorDiv = document.getElementById(`${fieldId}-error`);
        if (errorDiv) {
          errorDiv.classList.add("hidden");
        }
      }

      // Fonction de vérification du rate limiting
      function checkRateLimit(): boolean {
        const now = Date.now();
        const submissions = JSON.parse(
          localStorage.getItem(RATE_LIMIT_KEY) || "[]"
        );

        // Nettoyer les anciennes soumissions
        const recentSubmissions = submissions.filter(
          (time: number) => now - time < RATE_LIMIT_WINDOW
        );

        return recentSubmissions.length < MAX_SUBMISSIONS;
      }

      // Fonction pour enregistrer une soumission
      function recordSubmission() {
        const now = Date.now();
        const submissions = JSON.parse(
          localStorage.getItem(RATE_LIMIT_KEY) || "[]"
        );
        submissions.push(now);

        // Garder seulement les soumissions récentes
        const recentSubmissions = submissions.filter(
          (time: number) => now - time < RATE_LIMIT_WINDOW
        );
        localStorage.setItem(RATE_LIMIT_KEY, JSON.stringify(recentSubmissions));
      }

      function checkFormValidity() {
        // Vérifier que tous les champs obligatoires sont remplis
        const allFieldsFilled = requiredFields.every(
          (field) => field.value.trim() !== ""
        );

        // Vérifications spécifiques
        const zipCodeField = document.getElementById(
          "zipCode"
        ) as HTMLInputElement;
        const messageField = document.getElementById(
          "message"
        ) as HTMLTextAreaElement;

        let isValid = allFieldsFilled;

        // Validation du code postal
        if (zipCodeField.value && !validateZipCode(zipCodeField.value)) {
          showFieldError(
            "zipCode",
            locale === "fr"
              ? "Le code postal doit contenir 5 chiffres"
              : "Zip code must contain 5 digits"
          );
          isValid = false;
        } else {
          hideFieldError("zipCode");
        }

        // Validation du message
        if (messageField.value && !validateMessage(messageField.value)) {
          showFieldError(
            "message",
            locale === "fr"
              ? "Le message de motivation doit contenir au moins 20 caractères"
              : "The motivation message must contain at least 20 characters"
          );
          isValid = false;
        } else {
          hideFieldError("message");
        }

        // Activer le bouton si tout est ok
        if (isValid && allFieldsFilled) {
          submitButton.disabled = false;
          submitButton.className =
            "w-full bg-primary hover:bg-primary/90 text-white font-semibold py-4 px-6 rounded-lg transition-all duration-300 transform hover:scale-[1.02] hover:shadow-lg flex items-center justify-center space-x-2 cursor-pointer";
        } else {
          submitButton.disabled = true;
          submitButton.className =
            "w-full bg-primary/50 text-white font-semibold py-4 px-6 rounded-lg transition-all duration-300 flex items-center justify-center space-x-2 cursor-not-allowed";
        }
      }

      // Fonction pour afficher un message à la place du bouton
      function showFormMessage(message: string, isError: boolean = false) {
        const submitButton = document.getElementById(
          "submit-button"
        ) as HTMLButtonElement;
        const messageDiv = document.getElementById(
          "form-message"
        ) as HTMLDivElement;

        // Masquer le bouton
        submitButton.style.display = "none";

        // Configurer et afficher le message
        messageDiv.className = `w-full py-4 px-6 rounded-lg text-center font-semibold ${
          isError ? "bg-red-500 text-white" : "bg-green-500 text-white"
        }`;
        messageDiv.textContent = message;
        messageDiv.classList.remove("hidden");
      }

      // Fonction pour envoyer l'email via Brevo
      async function sendEmailViaBrevo(data: any) {
        const fullName = `${data.firstName} ${data.lastName}`;

        const htmlContent = `
          <h2>Nouvelle candidature - Disciples d'Escoffier</h2>
          <div style="font-family: Arial, sans-serif; max-width: 600px;">
            <h3>Informations personnelles</h3>
            <p><strong>Nom complet :</strong> ${fullName}</p>
            <p><strong>Email :</strong> ${data.email}</p>
            ${data.phone ? `<p><strong>Téléphone :</strong> ${data.phone}</p>` : ""}
            <p><strong>Profession :</strong> ${data.profession}</p>
            <p><strong>Ville :</strong> ${data.city}</p>
            <p><strong>Code postal :</strong> ${data.zipCode}</p>
            
            <h3>Motivation</h3>
            <p style="white-space: pre-line;">${data.message}</p>
          </div>
        `;

        const response = await fetch("https://api.brevo.com/v3/smtp/email", {
          method: "POST",
          headers: {
            accept: "application/json",
            "api-key": import.meta.env.PUBLIC_BREVO_API,
            "content-type": "application/json",
          },
          body: JSON.stringify({
            sender: {
              name: "Site Disciples d'Escoffier",
              email: import.meta.env.PUBLIC_BREVO_SENDER,
            },
            to: [
              {
                email: import.meta.env.PUBLIC_BREVO_TO,
              },
            ],
            replyTo: {
              email: data.email,
              name: fullName,
            },
            subject: `Nouvelle candidature de ${fullName}`,
            htmlContent: htmlContent,
          }),
        });

        if (!response.ok) {
          const errorText = await response.text();
          throw new Error(`Erreur Brevo: ${response.status} - ${errorText}`);
        }

        return await response.json();
      }

      // Gérer la soumission du formulaire
      form.addEventListener("submit", async function (e) {
        e.preventDefault();

        // Vérifier le honeypot
        const botField = document.querySelector(
          'input[name="bot-field"]'
        ) as HTMLInputElement;
        if (botField && botField.value) {
          return; // Bot détecté, ne pas envoyer
        }

        // Vérifier le rate limiting
        if (!checkRateLimit()) {
          showFormMessage(
            locale === "fr"
              ? "Trop de tentatives. Veuillez attendre avant de réessayer."
              : "Too many attempts. Please wait before trying again.",
            true
          );
          return;
        }

        // Désactiver le bouton et changer le texte
        submitButton.disabled = true;
        const originalText = buttonText.textContent;
        buttonText.textContent =
          locale === "fr" ? "Envoi en cours..." : "Sending...";
        submitButton.className =
          "w-full bg-primary/50 text-white font-semibold py-4 px-6 rounded-lg transition-all duration-300 flex items-center justify-center space-x-2 cursor-not-allowed";

        try {
          // Collecter les données du formulaire
          const formData = new FormData(form);
          const data = {
            firstName: formData.get("firstName") as string,
            lastName: formData.get("lastName") as string,
            email: formData.get("email") as string,
            phone: formData.get("phone") as string,
            profession: formData.get("profession") as string,
            city: formData.get("city") as string,
            zipCode: formData.get("zipCode") as string,
            message: formData.get("message") as string,
          };

          // Envoyer directement via Brevo
          await sendEmailViaBrevo(data);

          // Enregistrer la soumission pour le rate limiting
          recordSubmission();

          showFormMessage(
            locale === "fr"
              ? "Votre candidature a été envoyée avec succès ! Nous vous recontacterons bientôt."
              : "Your application has been sent successfully! We will contact you soon."
          );
          // Ne pas reset le formulaire pour éviter le spam
          // form.reset();
        } catch (error) {
          console.error("Erreur:", error);
          showFormMessage(
            locale === "fr"
              ? "Une erreur est survenue lors de l'envoi. Veuillez réessayer."
              : "An error occurred while sending. Please try again.",
            true
          );

          // En cas d'erreur, restaurer le bouton pour permettre une nouvelle tentative
          buttonText.textContent = originalText;
          checkFormValidity();
        }
        // En cas de succès, le formulaire reste bloqué (pas de finally)
      });

      // Écouter les changements sur les champs obligatoires
      requiredFields.forEach((field) => {
        field.addEventListener("input", checkFormValidity);
      });

      // Écouter spécifiquement le champ message
      const messageField = document.getElementById(
        "message"
      ) as HTMLTextAreaElement;
      messageField.addEventListener("input", checkFormValidity);

      // Vérification initiale
      checkFormValidity();
    });
  </script>
</section>
