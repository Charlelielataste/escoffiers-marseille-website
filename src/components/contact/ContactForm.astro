---
// Composant de formulaire de contact pour Les Disciples d'Escoffier Marseille
---

<!-- Modals pour les messages de succès et d'erreur -->
<div
  id="success-modal"
  class="fixed inset-0 bg-black bg-opacity-50 items-center justify-center z-50 hidden"
>
  <div
    class="bg-white rounded-2xl p-8 max-w-md mx-4 transform transition-all duration-300 scale-95"
  >
    <div class="text-center">
      <div
        class="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4"
      >
        <svg
          class="w-8 h-8 text-green-500"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M5 13l4 4L19 7"></path>
        </svg>
      </div>
      <h3 class="text-xl font-semibold text-text-primary mb-2">
        Message envoyé !
      </h3>
      <p class="text-gray-600 mb-6">
        Merci pour votre candidature. Nous examinerons votre demande et vous
        contacterons bientôt.
      </p>
      <button
        id="close-success-modal"
        class="bg-primary hover:bg-primary/90 text-white px-6 py-2 rounded-lg transition-colors"
      >
        Fermer
      </button>
    </div>
  </div>
</div>

<div
  id="error-modal"
  class="fixed inset-0 bg-black bg-opacity-50 items-center justify-center z-50 hidden"
>
  <div
    class="bg-white rounded-2xl p-8 max-w-md mx-4 transform transition-all duration-300 scale-95"
  >
    <div class="text-center">
      <div
        class="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4"
      >
        <svg
          class="w-8 h-8 text-red-500"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L3.34 16.5c-.77.833.192 2.5 1.732 2.5z"
          ></path>
        </svg>
      </div>
      <h3 class="text-xl font-semibold text-text-primary mb-2">
        Erreur d'envoi
      </h3>
      <p class="text-gray-600 mb-6" id="error-message">
        Une erreur est survenue lors de l'envoi de votre message. Veuillez
        réessayer.
      </p>
      <button
        id="close-error-modal"
        class="bg-red-500 hover:bg-red-600 text-white px-6 py-2 rounded-lg transition-colors"
      >
        Fermer
      </button>
    </div>
  </div>
</div>

<section class="py-12 bg-white">
  <div class="container mx-auto px-4">
    <div class="max-w-6xl mx-auto">
      <div
        class="border-l-4 border-primary bg-primary/10 p-6 rounded-r-lg mb-10 flex flex-col items-center justify-center"
      >
        <blockquote class="text-lg italic text-text-primary mb-3">
          "La cuisine est un art qui doit être traité avec respect et passion."
        </blockquote>
        <cite class="text-primary font-semibold">Auguste Escoffier</cite>
      </div>

      <!-- Formulaire -->
      <div class="bg-container rounded-2xl max-w-2xl mx-auto p-8 shadow-lg">
        <form
          id="contact-form"
          name="contact"
          method="POST"
          class="space-y-6"
          data-netlify="true"
          data-netlify-honeypot="bot-field"
        >
          <!-- Champ honeypot caché pour la protection anti-spam -->
          <div style="display: none;">
            <label>
              Ne pas remplir ce champ si vous êtes humain:
              <input name="bot-field" />
            </label>
          </div>

          <!-- Champ caché pour identifier le formulaire -->
          <input type="hidden" name="form-name" value="contact" />

          <div class="grid md:grid-cols-2 gap-4">
            <div class="form-group">
              <label
                for="firstName"
                class="block text-sm font-medium text-text-primary mb-2"
              >
                Prénom *
              </label>
              <input
                type="text"
                id="firstName"
                name="firstName"
                required
                class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-primary focus:border-primary transition-colors bg-white text-text-primary placeholder-gray-400"
                placeholder="Votre prénom"
              />
            </div>
            <div class="form-group">
              <label
                for="lastName"
                class="block text-sm font-medium text-text-primary mb-2"
              >
                Nom *
              </label>
              <input
                type="text"
                id="lastName"
                name="lastName"
                required
                class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-primary focus:border-primary transition-colors bg-white text-text-primary placeholder-gray-400"
                placeholder="Votre nom"
              />
            </div>
          </div>

          <!-- Email -->
          <div class="form-group">
            <label
              for="email"
              class="block text-sm font-medium text-text-primary mb-2"
            >
              Adresse email *
            </label>
            <input
              type="email"
              id="email"
              name="email"
              required
              class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-primary focus:border-primary transition-colors bg-white text-text-primary placeholder-gray-400"
              placeholder="votre.email@exemple.com"
            />
          </div>

          <!-- Téléphone -->
          <div class="form-group">
            <label
              for="phone"
              class="block text-sm font-medium text-text-primary mb-2"
            >
              Téléphone
            </label>
            <input
              type="tel"
              id="phone"
              name="phone"
              class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-primary focus:border-primary transition-colors bg-white text-text-primary placeholder-gray-400"
              placeholder="06 12 34 56 78"
            />
          </div>

          <!-- Expérience culinaire -->
          <div class="form-group">
            <label
              for="experience"
              class="block text-sm font-medium text-text-primary mb-2"
            >
              Votre expérience culinaire *
            </label>
            <input
              type="text"
              id="experience"
              name="experience"
              required
              class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-primary focus:border-primary transition-colors bg-white text-text-primary placeholder-gray-400"
              placeholder="Décrivez votre parcours culinaire (amateur, étudiant, professionnel, chef, etc.)"
            />
          </div>

          <!-- Type d'engagement -->
          <div class="form-group">
            <label class="block text-sm font-medium text-text-primary mb-3">
              Comment souhaitez-vous vous engager ? *
            </label>
            <div class="space-y-3">
              <label class="flex items-center">
                <input
                  type="checkbox"
                  name="engagement"
                  value="evenements"
                  class="h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded"
                />
                <span class="ml-3 text-text-primary"
                  >Participation aux événements caritatifs</span
                >
              </label>
              <label class="flex items-center">
                <input
                  type="checkbox"
                  name="engagement"
                  value="formation"
                  class="h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded"
                />
                <span class="ml-3 text-text-primary"
                  >Formations et ateliers culinaires</span
                >
              </label>
              <label class="flex items-center">
                <input
                  type="checkbox"
                  name="engagement"
                  value="organisation"
                  class="h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded"
                />
                <span class="ml-3 text-text-primary"
                  >Organisation d'événements</span
                >
              </label>
              <label class="flex items-center">
                <input
                  type="checkbox"
                  name="engagement"
                  value="communication"
                  class="h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded"
                />
                <span class="ml-3 text-text-primary"
                  >Communication et médias</span
                >
              </label>
            </div>
          </div>

          <!-- Message -->
          <div class="form-group">
            <label
              for="message"
              class="block text-sm font-medium text-text-primary mb-2"
            >
              Parlez-nous de votre motivation *
            </label>
            <textarea
              id="message"
              name="message"
              required
              rows="5"
              class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-primary focus:border-primary transition-colors bg-white text-text-primary placeholder-gray-400 resize-none"
              placeholder="Expliquez-nous pourquoi vous souhaitez rejoindre les Disciples d'Escoffier et comment vous envisagez de contribuer à notre mission..."
            ></textarea>
          </div>

          <!-- Bouton d'envoi -->
          <div class="pt-4">
            <button
              type="submit"
              id="submit-button"
              class="w-full bg-primary hover:bg-primary/90 text-white font-semibold py-4 px-6 rounded-lg transition-all duration-300 transform hover:scale-[1.02] hover:shadow-lg flex items-center justify-center space-x-2"
            >
              <span id="button-text">Envoyer ma candidature</span>
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</section>

<script>
  // Gestion du formulaire avec Netlify Forms et popups
  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("contact-form") as HTMLFormElement;
    const submitButton = document.getElementById(
      "submit-button"
    ) as HTMLButtonElement;
    const buttonText = document.getElementById(
      "button-text"
    ) as HTMLSpanElement;
    const successModal = document.getElementById(
      "success-modal"
    ) as HTMLDivElement;
    const errorModal = document.getElementById("error-modal") as HTMLDivElement;
    const errorMessage = document.getElementById(
      "error-message"
    ) as HTMLParagraphElement;

    // Fonction pour afficher la modal de succès
    const showSuccessModal = () => {
      successModal.classList.remove("hidden");
      successModal.classList.add("flex");
      setTimeout(() => {
        const modalContent = successModal.querySelector("div");
        if (modalContent) {
          modalContent.classList.remove("scale-95");
          modalContent.classList.add("scale-100");
        }
      }, 50);
    };

    // Fonction pour afficher la modal d'erreur
    const showErrorModal = (
      message: string = "Une erreur est survenue lors de l'envoi de votre message. Veuillez réessayer."
    ) => {
      errorMessage.textContent = message;
      errorModal.classList.remove("hidden");
      errorModal.classList.add("flex");
      setTimeout(() => {
        const modalContent = errorModal.querySelector("div");
        if (modalContent) {
          modalContent.classList.remove("scale-95");
          modalContent.classList.add("scale-100");
        }
      }, 50);
    };

    // Fonction pour fermer les modals
    const closeModal = (modal: HTMLDivElement) => {
      const modalContent = modal.querySelector("div");
      if (modalContent) {
        modalContent.classList.remove("scale-100");
        modalContent.classList.add("scale-95");
      }
      setTimeout(() => {
        modal.classList.add("hidden");
        modal.classList.remove("flex");
      }, 300);
    };

    // Fonction pour réinitialiser le bouton
    const resetButton = () => {
      submitButton.disabled = false;
      buttonText.textContent = "Envoyer ma candidature";
      submitButton.classList.remove("opacity-75");
    };

    // Fonction pour afficher le state de chargement
    const showLoadingState = () => {
      submitButton.disabled = true;
      submitButton.classList.add("opacity-75");
      buttonText.innerHTML = `
        <div class="flex items-center space-x-2">
          <svg class="animate-spin h-5 w-5" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          <span>Envoi en cours...</span>
        </div>
      `;
    };

    // Événements pour fermer les modals
    document
      .getElementById("close-success-modal")
      ?.addEventListener("click", () => {
        closeModal(successModal);
      });

    document
      .getElementById("close-error-modal")
      ?.addEventListener("click", () => {
        closeModal(errorModal);
      });

    // Fermer les modals en cliquant sur l'arrière-plan
    [successModal, errorModal].forEach((modal) => {
      modal.addEventListener("click", (e) => {
        if (e.target === modal) {
          closeModal(modal);
        }
      });
    });

    // Fermer les modals avec la touche Échap
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape") {
        if (!successModal.classList.contains("hidden")) {
          closeModal(successModal);
        }
        if (!errorModal.classList.contains("hidden")) {
          closeModal(errorModal);
        }
      }
    });

    if (form) {
      // Validation en temps réel des champs requis
      const requiredFields = form.querySelectorAll(
        "input[required], select[required], textarea[required]"
      );
      requiredFields.forEach((field) => {
        const inputField = field as
          | HTMLInputElement
          | HTMLSelectElement
          | HTMLTextAreaElement;

        field.addEventListener("blur", () => {
          if (inputField.value.trim() === "") {
            field.classList.add("border-red-500");
            field.classList.remove("border-gray-300");
          } else {
            field.classList.remove("border-red-500");
            field.classList.add("border-gray-300");
          }
        });

        field.addEventListener("input", () => {
          if (inputField.value.trim() !== "") {
            field.classList.remove("border-red-500");
            field.classList.add("border-gray-300");
          }
        });
      });

      // Validation des checkboxes d'engagement
      const engagementCheckboxes = form.querySelectorAll(
        'input[name="engagement"]'
      );
      const validateEngagement = () => {
        const checkedBoxes = form.querySelectorAll(
          'input[name="engagement"]:checked'
        );
        return checkedBoxes.length > 0;
      };

      engagementCheckboxes.forEach((checkbox) => {
        checkbox.addEventListener("change", () => {
          if (validateEngagement()) {
            engagementCheckboxes.forEach((cb) => {
              const label = cb.closest("label");
              if (label) {
                label.classList.remove("text-red-500");
              }
            });
          }
        });
      });

      // Gestion de la soumission du formulaire
      form.addEventListener("submit", async (e) => {
        e.preventDefault();

        // Validation de l'engagement
        if (!validateEngagement()) {
          engagementCheckboxes.forEach((cb) => {
            const label = cb.closest("label");
            if (label) {
              label.classList.add("text-red-500");
            }
          });

          // Faire défiler vers la section d'engagement
          const firstCheckbox = engagementCheckboxes[0];
          const formGroup = firstCheckbox?.closest(".form-group");
          if (formGroup) {
            formGroup.scrollIntoView({
              behavior: "smooth",
              block: "center",
            });
          }
          return;
        }

        // Afficher l'état de chargement
        showLoadingState();

        try {
          // Préparer les données du formulaire
          const formData = new FormData(form);

          // Construire les valeurs d'engagement sélectionnées
          const engagementValues: string[] = [];
          const checkedEngagements = form.querySelectorAll(
            'input[name="engagement"]:checked'
          ) as NodeListOf<HTMLInputElement>;
          checkedEngagements.forEach((checkbox) => {
            engagementValues.push(checkbox.value);
          });

          // Remplacer les valeurs d'engagement par une chaîne unique
          formData.delete("engagement");
          formData.append("engagement", engagementValues.join(", "));

          // Envoyer à Netlify
          const response = await fetch("/", {
            method: "POST",
            headers: { "Content-Type": "application/x-www-form-urlencoded" },
            body: new URLSearchParams(formData as any).toString(),
          });

          if (response.ok) {
            // Succès
            form.reset();
            showSuccessModal();
          } else {
            // Erreur du serveur
            const errorText = await response.text();
            showErrorModal(`Erreur ${response.status}: ${response.statusText}`);
          }
        } catch (error) {
          // Erreur réseau ou autre
          console.error("Erreur lors de l'envoi:", error);
          showErrorModal(
            "Erreur de connexion. Vérifiez votre connexion internet et réessayez."
          );
        } finally {
          // Réinitialiser le bouton
          resetButton();
        }
      });
    }
  });
</script>
