---
import { Image } from "astro:assets";
export interface Props {
  picture: ImageMetadata;
  pictureAlt?: string;
}

const { picture, pictureAlt = "Hero image" } = Astro.props;
---

<section
  class="relative h-screen flex items-center justify-center overflow-hidden"
  style="overscroll-behavior-y: none;"
>
  <!-- Image de fond -->
  <div class="absolute inset-0 z-0 overflow-hidden">
    <div
      class="absolute rounded-full w-[85%] sm:w-[50%] h-[60%] sm:h-[35%] top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-gradient-to-b from-black/80 to-black/50 z-10 blur-3xl"
    >
    </div>
    <Image
      src={picture}
      alt={pictureAlt}
      widths={[640, 1024, 1440, 1920]}
      sizes="100vw"
      format="webp"
      class="fixed inset-0 w-full h-full object-cover transition-transform duration-75 ease-out"
      id="hero-image"
      priority
    />
  </div>

  <!-- Contenu du slot -->
  <slot />

  <!-- Scroll indicator -->
  <div class="absolute bottom-8 left-1/2 transform -translate-x-1/2 z-20">
    <div
      class="w-6 h-10 border-2 border-white rounded-full flex justify-center"
    >
      <div class="w-1 h-3 bg-white rounded-full mt-2 animate-bounce"></div>
    </div>
  </div>
</section>

<script>
  function initScrollZoom() {
    const heroImage = document.getElementById("hero-image");

    if (!heroImage) return;

    function handleScroll() {
      if (!heroImage) return;

      const scrollTop = Math.max(
        0,
        window.pageYOffset || document.documentElement.scrollTop
      );
      const windowHeight = window.innerHeight;

      // Calculer le facteur de zoom basé sur la position de scroll
      // Plus on scroll vers le bas, plus le zoom augmente
      const scrollProgress = Math.min(scrollTop / windowHeight, 1);
      const zoomFactor = 1 + scrollProgress * 0.1; // Zoom de 1 à 1.1

      // Appliquer la transformation
      heroImage.style.transform = `scale(${zoomFactor})`;
    }

    // Écouter le scroll avec throttling pour les performances
    let ticking = false;

    function onScroll() {
      if (!ticking) {
        requestAnimationFrame(() => {
          handleScroll();
          ticking = false;
        });
        ticking = true;
      }
    }

    window.addEventListener("scroll", onScroll, { passive: true });

    // Cleanup function pour les navigations SPA
    return () => {
      window.removeEventListener("scroll", onScroll);
    };
  }

  // Initialiser au chargement de la page
  document.addEventListener("DOMContentLoaded", initScrollZoom);

  // Réinitialiser pour les navigations SPA (Astro transitions)
  document.addEventListener("astro:page-load", initScrollZoom);
</script>

<style>
  /* Empêcher l'effet bounce sur toute la page */
  :global(html) {
    overscroll-behavior-y: none;
  }

  :global(body) {
    overscroll-behavior-y: none;
  }
</style>
